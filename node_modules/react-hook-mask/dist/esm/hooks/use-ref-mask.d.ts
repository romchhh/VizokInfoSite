import React from 'react';
import type { MaskGenerator } from '../types/mask-generator';
export interface UseRefMaskProps<T> {
    maskGenerator?: MaskGenerator;
    value?: string;
    onChange?: (value: string) => void;
    keepMask?: boolean;
    getCursorPosition: (el: T | undefined) => number;
    setCursorPosition: (cursorPosition: number, el: T | undefined) => void;
    ref?: React.ForwardedRef<T>;
}
export declare const useRefMask: <T>({ maskGenerator, value: outerValue, onChange, keepMask, ref, getCursorPosition: getCursorPositionOuter, setCursorPosition: setCursorPositionOuter, }: UseRefMaskProps<T>) => {
    displayValue: string | undefined;
    setDisplayValue: (value: string) => void;
    ref: React.MutableRefObject<T | null>;
};
